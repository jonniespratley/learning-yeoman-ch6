// Generated by CoffeeScript 1.6.3
"use strict";
var JsblogGenerator, chalk, path, util, yeoman;

util = require("util");

path = require("path");

yeoman = require("yeoman-generator");

chalk = require("chalk");

/*
js-blog-generator - This is an example generator.
*/


JsblogGenerator = yeoman.generators.Base.extend({
  /*
  	init - This method initializes the generator by loading the package.json file
  	and adding an event listener to the 'end' event of the generator.
  */
  init: function() {
    console.log(this.toString());
    this.pkg = require("../package.json");
     this.description = this.pkg.description;


      this.argument('name', { desc: 'This is the name', required: false, optional: true, type: 'String', defaults: 'my-new-blog', banner: 'This is the name of the blog.' });




    return this.on("end", function() {
      if (!this.options["skip-install"]) {
        this.installDependencies();
      }
    });
  },
    config: function() {
        this.config.set('coffeescript', false);
        this.config.set('requrejs', false);
    },
  /*
  	askFor - This method asks questions to the user by displaying prompts.
  	After the user enters there value, the callback then loops over each property and
  	sets the name = value on this generator.
  */

  askFor: function() {
    var done, prompts;
    done = this.async();
    this.log(this.yeoman);
    this.log(chalk.magenta("You're using the fantastic Jsblog generator."));
    prompts = [
        {
            type: 'input',
            name: 'blogName',
            message: 'What is the name of your blog?',
            "default": 'blog'
        }
    ];


   this.prompt(prompts, (function(props) {
      this.someOption = props.someOption;
      this.includeRequireJS = props.includeRequireJS;
      this.blogName = props.blogName;
      done();
    }).bind(this));
  },
  /*
  	app - This method creates the initial app files, the directory structure, package files,
  	configuration files, Gruntfiles etc. anything that needs to shell out the application should
  	be placed here.
  	@copy takes files in templates directory and copys to project root folder.
  	if no arguments are passed the generator instance is passed as an agrument,
  		and it uses _ underscore templating library to process, so that means 
  		you can use <%= _.capitalize(blogName) %> template rendering methods to 
  		display data from the generator.
  		this.bowerInstall([ 'jquery', 'underscore' ], { save: true });
  */

  app: function() {
    this.mkdir("app");
    this.mkdir("app/templates");
    this.mkdir("app/scripts");
    this.mkdir("app/styles");
    this.copy("_config.json", "config.js");
    this.copy("_package.json", "package.json");
    this.copy("_bower.json", "bower.json");
    this.copy('_main.js', 'app/scripts/main.js');
    this.copy('_main.css', 'app/styles/main.css');
    this.copy('_Gruntfile.js', 'Gruntfile.js');
    this.copy('_index.html', 'index.html');
  },
  /*
  	projectFiles - This method creates any project files needed for the application, 
  	such as .travis, .gitignore files, etc.
  */

  projectfiles: function() {
    this.copy("editorconfig", ".editorconfig");
    this.copy("jshintrc", ".jshintrc");
  }
});
JsblogGenerator.prototype.git = function git() {
    this.copy('gitignore', '.gitignore');
    this.copy('gitattributes', '.gitattributes');
};

JsblogGenerator.prototype.bower = function bower() {
    this.copy('bowerrc', '.bowerrc');
    //this.copy('_bower.json', 'bower.json');
};

JsblogGenerator.prototype.jshint = function jshint() {
    this.copy('jshintrc', '.jshintrc');
};

JsblogGenerator.prototype.editorConfig = function editorConfig() {
    this.copy('editorconfig', '.editorconfig');
};

JsblogGenerator.prototype.h5bp = function h5bp() {
    //this.copy('favicon.ico', 'app/favicon.ico');
    this.copy('404.html', 'app/404.html');
    this.copy('robots.txt', 'app/robots.txt');
    this.copy('htaccess', 'app/.htaccess');
};
module.exports = JsblogGenerator;